"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const mustache_1 = __importDefault(require("mustache"));
const os_family_1 = __importDefault(require("os-family"));
const exec_1 = require("../utils/exec");
const fs_exists_promised_1 = __importDefault(require("../utils/fs-exists-promised"));
const errors_1 = require("../errors");
const debug_1 = __importDefault(require("debug"));
const util_1 = require("util");
const LOGGER = (0, debug_1.default)('testcafe:browser-tools:open');
function log(data) {
    try {
        LOGGER((0, util_1.inspect)(data, { isTestCafeInspect: true, compact: false }));
    }
    catch (e) {
        LOGGER(e.stack ? e.stack : String(e));
    }
}
async function checkBrowserPath(browserInfo) {
    if (!browserInfo.path) {
        //NOTE: Path may be undefined when winOpenCmdTemplate is specified (e.g. MS Edge)
        if (browserInfo.winOpenCmdTemplate)
            return;
        throw new errors_1.BrowserPathNotSetError();
    }
    var fileExists = await (0, fs_exists_promised_1.default)(browserInfo.path);
    if (!fileExists)
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
}
function getWinOpenCommand(browserInfo, pageUrl) {
    if (browserInfo.winOpenCmdTemplate) {
        return mustache_1.default.render(browserInfo.winOpenCmdTemplate, {
            pageUrl: pageUrl
        });
    }
    var browserDirPath = path_1.default.dirname(browserInfo.path);
    var browserExecFileName = path_1.default.basename(browserInfo.path);
    return `start /D "${browserDirPath}" .\\${browserExecFileName} ${browserInfo.cmd} ${pageUrl}`;
}
function getMacOpenCommand(browserInfo, pageUrl) {
    return mustache_1.default.render(browserInfo.macOpenCmdTemplate, {
        path: browserInfo.path,
        cmd: browserInfo.cmd,
        pageUrl: pageUrl
    });
}
function getLinuxOpenCommand(browserInfo, pageUrl) {
    return `"${browserInfo.path}" ${browserInfo.cmd} "${pageUrl}" 0<&- >/dev/null 2>&1 &`;
}
var getOpenCommand = null;
if (os_family_1.default.win)
    getOpenCommand = getWinOpenCommand;
else if (os_family_1.default.mac)
    getOpenCommand = getMacOpenCommand;
else if (os_family_1.default.linux)
    getOpenCommand = getLinuxOpenCommand;
/**
 * Opens the web page in a new instance of the browser.
 * @function
 * @async
 * @name open
 * @param {BrowserInfo} browserInfo - Provides information on the browser where the web page should be opened.
 * @param {string} pageUrl - Specifies the web page URL.
 */
async function default_1(browserInfo, pageUrl) {
    await checkBrowserPath(browserInfo);
    if (!getOpenCommand)
        return;
    var command = getOpenCommand(browserInfo, pageUrl);
    try {
        log(command);
        await (0, exec_1.exec)(command);
    }
    catch (err) {
        throw new errors_1.UnableToRunBrowsersError({ path: browserInfo.path });
    }
}
exports.default = default_1;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3Blbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvb3Blbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLGdEQUF3QjtBQUN4Qix3REFBZ0M7QUFDaEMsMERBQTJCO0FBQzNCLHdDQUFxQztBQUNyQyxxRkFBaUQ7QUFDakQsc0NBQTZFO0FBQzdFLGtEQUEwQjtBQUMxQiwrQkFBK0I7QUFFL0IsTUFBTSxNQUFNLEdBQUcsSUFBQSxlQUFLLEVBQUMsNkJBQTZCLENBQUMsQ0FBQztBQUVwRCxTQUFTLEdBQUcsQ0FBRSxJQUFJO0lBQ2QsSUFBSTtRQUNBLE1BQU0sQ0FBQyxJQUFBLGNBQU8sRUFBQyxJQUFJLEVBQUUsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztLQUN0RTtJQUNELE9BQU8sQ0FBQyxFQUFFO1FBQ04sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3pDO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxnQkFBZ0IsQ0FBRSxXQUFXO0lBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFO1FBQ25CLGlGQUFpRjtRQUNqRixJQUFJLFdBQVcsQ0FBQyxrQkFBa0I7WUFDOUIsT0FBTztRQUVYLE1BQU0sSUFBSSwrQkFBc0IsRUFBRSxDQUFDO0tBQ3RDO0lBRUQsSUFBSSxVQUFVLEdBQUcsTUFBTSxJQUFBLDRCQUFNLEVBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWhELElBQUksQ0FBQyxVQUFVO1FBQ1gsTUFBTSxJQUFJLGlDQUF3QixDQUFDLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBQ3ZFLENBQUM7QUFFRCxTQUFTLGlCQUFpQixDQUFFLFdBQVcsRUFBRSxPQUFPO0lBQzVDLElBQUksV0FBVyxDQUFDLGtCQUFrQixFQUFFO1FBQ2hDLE9BQU8sa0JBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGtCQUFrQixFQUFFO1lBQ25ELE9BQU8sRUFBRSxPQUFPO1NBQ25CLENBQUMsQ0FBQztLQUNOO0lBRUQsSUFBSSxjQUFjLEdBQVEsY0FBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekQsSUFBSSxtQkFBbUIsR0FBRyxjQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUUxRCxPQUFPLGFBQWEsY0FBYyxRQUFRLG1CQUFtQixJQUFJLFdBQVcsQ0FBQyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7QUFDbEcsQ0FBQztBQUVELFNBQVMsaUJBQWlCLENBQUUsV0FBVyxFQUFFLE9BQU87SUFDNUMsT0FBTyxrQkFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsa0JBQWtCLEVBQUU7UUFDbkQsSUFBSSxFQUFLLFdBQVcsQ0FBQyxJQUFJO1FBQ3pCLEdBQUcsRUFBTSxXQUFXLENBQUMsR0FBRztRQUN4QixPQUFPLEVBQUUsT0FBTztLQUNuQixDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQsU0FBUyxtQkFBbUIsQ0FBRSxXQUFXLEVBQUUsT0FBTztJQUM5QyxPQUFPLElBQUksV0FBVyxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsR0FBRyxLQUFLLE9BQU8sMEJBQTBCLENBQUM7QUFDMUYsQ0FBQztBQUVELElBQUksY0FBYyxHQUFHLElBQUksQ0FBQztBQUUxQixJQUFJLG1CQUFFLENBQUMsR0FBRztJQUNOLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQztLQUNsQyxJQUFJLG1CQUFFLENBQUMsR0FBRztJQUNYLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQztLQUNsQyxJQUFJLG1CQUFFLENBQUMsS0FBSztJQUNiLGNBQWMsR0FBRyxtQkFBbUIsQ0FBQztBQUV6Qzs7Ozs7OztHQU9HO0FBQ1ksS0FBSyxvQkFBVyxXQUFXLEVBQUUsT0FBTztJQUMvQyxNQUFNLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBRXBDLElBQUksQ0FBQyxjQUFjO1FBQ2YsT0FBTztJQUVYLElBQUksT0FBTyxHQUFHLGNBQWMsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFbkQsSUFBSTtRQUNBLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUViLE1BQU0sSUFBQSxXQUFJLEVBQUMsT0FBTyxDQUFDLENBQUM7S0FDdkI7SUFDRCxPQUFPLEdBQUcsRUFBRTtRQUNSLE1BQU0sSUFBSSxpQ0FBd0IsQ0FBQyxFQUFFLElBQUksRUFBRSxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztLQUNsRTtBQUNMLENBQUM7QUFoQkQsNEJBZ0JDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgTXVzdGFjaGUgZnJvbSAnbXVzdGFjaGUnO1xuaW1wb3J0IE9TIGZyb20gJ29zLWZhbWlseSc7XG5pbXBvcnQgeyBleGVjIH0gZnJvbSAnLi4vdXRpbHMvZXhlYyc7XG5pbXBvcnQgZXhpc3RzIGZyb20gJy4uL3V0aWxzL2ZzLWV4aXN0cy1wcm9taXNlZCc7XG5pbXBvcnQgeyBCcm93c2VyUGF0aE5vdFNldEVycm9yLCBVbmFibGVUb1J1bkJyb3dzZXJzRXJyb3IgfSBmcm9tICcuLi9lcnJvcnMnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICd1dGlsJztcblxuY29uc3QgTE9HR0VSID0gZGVidWcoJ3Rlc3RjYWZlOmJyb3dzZXItdG9vbHM6b3BlbicpO1xuXG5mdW5jdGlvbiBsb2cgKGRhdGEpIHtcbiAgICB0cnkge1xuICAgICAgICBMT0dHRVIoaW5zcGVjdChkYXRhLCB7IGlzVGVzdENhZmVJbnNwZWN0OiB0cnVlLCBjb21wYWN0OiBmYWxzZSB9KSk7XG4gICAgfVxuICAgIGNhdGNoIChlKSB7XG4gICAgICAgIExPR0dFUihlLnN0YWNrID8gZS5zdGFjayA6IFN0cmluZyhlKSk7XG4gICAgfVxufVxuXG5hc3luYyBmdW5jdGlvbiBjaGVja0Jyb3dzZXJQYXRoIChicm93c2VySW5mbykge1xuICAgIGlmICghYnJvd3NlckluZm8ucGF0aCkge1xuICAgICAgICAvL05PVEU6IFBhdGggbWF5IGJlIHVuZGVmaW5lZCB3aGVuIHdpbk9wZW5DbWRUZW1wbGF0ZSBpcyBzcGVjaWZpZWQgKGUuZy4gTVMgRWRnZSlcbiAgICAgICAgaWYgKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICB0aHJvdyBuZXcgQnJvd3NlclBhdGhOb3RTZXRFcnJvcigpO1xuICAgIH1cblxuICAgIHZhciBmaWxlRXhpc3RzID0gYXdhaXQgZXhpc3RzKGJyb3dzZXJJbmZvLnBhdGgpO1xuXG4gICAgaWYgKCFmaWxlRXhpc3RzKVxuICAgICAgICB0aHJvdyBuZXcgVW5hYmxlVG9SdW5Ccm93c2Vyc0Vycm9yKHsgcGF0aDogYnJvd3NlckluZm8ucGF0aCB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0V2luT3BlbkNvbW1hbmQgKGJyb3dzZXJJbmZvLCBwYWdlVXJsKSB7XG4gICAgaWYgKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSkge1xuICAgICAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKGJyb3dzZXJJbmZvLndpbk9wZW5DbWRUZW1wbGF0ZSwge1xuICAgICAgICAgICAgcGFnZVVybDogcGFnZVVybFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgYnJvd3NlckRpclBhdGggICAgICA9IHBhdGguZGlybmFtZShicm93c2VySW5mby5wYXRoKTtcbiAgICB2YXIgYnJvd3NlckV4ZWNGaWxlTmFtZSA9IHBhdGguYmFzZW5hbWUoYnJvd3NlckluZm8ucGF0aCk7XG5cbiAgICByZXR1cm4gYHN0YXJ0IC9EIFwiJHticm93c2VyRGlyUGF0aH1cIiAuXFxcXCR7YnJvd3NlckV4ZWNGaWxlTmFtZX0gJHticm93c2VySW5mby5jbWR9ICR7cGFnZVVybH1gO1xufVxuXG5mdW5jdGlvbiBnZXRNYWNPcGVuQ29tbWFuZCAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICByZXR1cm4gTXVzdGFjaGUucmVuZGVyKGJyb3dzZXJJbmZvLm1hY09wZW5DbWRUZW1wbGF0ZSwge1xuICAgICAgICBwYXRoOiAgICBicm93c2VySW5mby5wYXRoLFxuICAgICAgICBjbWQ6ICAgICBicm93c2VySW5mby5jbWQsXG4gICAgICAgIHBhZ2VVcmw6IHBhZ2VVcmxcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0TGludXhPcGVuQ29tbWFuZCAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICByZXR1cm4gYFwiJHticm93c2VySW5mby5wYXRofVwiICR7YnJvd3NlckluZm8uY21kfSBcIiR7cGFnZVVybH1cIiAwPCYtID4vZGV2L251bGwgMj4mMSAmYDtcbn1cblxudmFyIGdldE9wZW5Db21tYW5kID0gbnVsbDtcblxuaWYgKE9TLndpbilcbiAgICBnZXRPcGVuQ29tbWFuZCA9IGdldFdpbk9wZW5Db21tYW5kO1xuZWxzZSBpZiAoT1MubWFjKVxuICAgIGdldE9wZW5Db21tYW5kID0gZ2V0TWFjT3BlbkNvbW1hbmQ7XG5lbHNlIGlmIChPUy5saW51eClcbiAgICBnZXRPcGVuQ29tbWFuZCA9IGdldExpbnV4T3BlbkNvbW1hbmQ7XG5cbi8qKlxuICogT3BlbnMgdGhlIHdlYiBwYWdlIGluIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBicm93c2VyLlxuICogQGZ1bmN0aW9uXG4gKiBAYXN5bmNcbiAqIEBuYW1lIG9wZW5cbiAqIEBwYXJhbSB7QnJvd3NlckluZm99IGJyb3dzZXJJbmZvIC0gUHJvdmlkZXMgaW5mb3JtYXRpb24gb24gdGhlIGJyb3dzZXIgd2hlcmUgdGhlIHdlYiBwYWdlIHNob3VsZCBiZSBvcGVuZWQuXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFnZVVybCAtIFNwZWNpZmllcyB0aGUgd2ViIHBhZ2UgVVJMLlxuICovXG5leHBvcnQgZGVmYXVsdCBhc3luYyBmdW5jdGlvbiAoYnJvd3NlckluZm8sIHBhZ2VVcmwpIHtcbiAgICBhd2FpdCBjaGVja0Jyb3dzZXJQYXRoKGJyb3dzZXJJbmZvKTtcblxuICAgIGlmICghZ2V0T3BlbkNvbW1hbmQpXG4gICAgICAgIHJldHVybjtcblxuICAgIHZhciBjb21tYW5kID0gZ2V0T3BlbkNvbW1hbmQoYnJvd3NlckluZm8sIHBhZ2VVcmwpO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgbG9nKGNvbW1hbmQpO1xuXG4gICAgICAgIGF3YWl0IGV4ZWMoY29tbWFuZCk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFVuYWJsZVRvUnVuQnJvd3NlcnNFcnJvcih7IHBhdGg6IGJyb3dzZXJJbmZvLnBhdGggfSk7XG4gICAgfVxufVxuIl19