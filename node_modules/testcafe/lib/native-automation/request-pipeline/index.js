"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lodash_1 = require("lodash");
const event_provider_1 = __importDefault(require("../request-hooks/event-provider"));
const resource_injector_1 = __importDefault(require("../resource-injector"));
const headers_1 = require("../utils/headers");
const cdp_1 = require("../utils/cdp");
const error_route_1 = __importDefault(require("../error-route"));
const debug_loggers_1 = require("../../utils/debug-loggers");
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const special_handlers_1 = __importDefault(require("./special-handlers"));
const safe_api_1 = require("./safe-api");
const api_base_1 = __importDefault(require("../api-base"));
const resendAuthRequest_1 = require("./resendAuthRequest");
const test_run_bridge_1 = __importDefault(require("./test-run-bridge"));
const context_info_1 = __importDefault(require("./context-info"));
const errors_1 = require("../errors");
const ALL_REQUEST_RESPONSES = { requestStage: 'Request' };
const ALL_REQUEST_REQUESTS = { requestStage: 'Response' };
const ALL_REQUESTS_DATA = [ALL_REQUEST_REQUESTS, ALL_REQUEST_RESPONSES];
class NativeAutomationRequestPipeline extends api_base_1.default {
    constructor(browserId, client, options) {
        super(browserId, client, options);
        this._testRunBridge = new test_run_bridge_1.default(browserId);
        this._contextInfo = new context_info_1.default(this._testRunBridge);
        this._specialServiceRoutes = this._getSpecialServiceRoutes();
        this.requestHookEventProvider = new event_provider_1.default();
        this._resourceInjector = new resource_injector_1.default(this._testRunBridge);
        this._stopped = false;
        this._currentFrameTree = null;
        this._failedRequestIds = [];
        this.restoringStorages = null;
        this.contextStorage = null;
        this._pendingCertificateError = null;
        this._setOptionsForResourceInjector();
    }
    _setOptionsForResourceInjector() {
        const options = this._createResourceInjectorOptions();
        this._resourceInjector.setOptions(options);
    }
    _createResourceInjectorOptions() {
        return {
            specialServiceRoutes: this._specialServiceRoutes,
            developmentMode: this.options.developmentMode,
        };
    }
    _getSpecialServiceRoutes() {
        const browserConnection = this._testRunBridge.getBrowserConnection();
        const proxy = browserConnection.browserConnectionGateway.proxy;
        return {
            errorPage1: proxy.resolveRelativeServiceUrl(error_route_1.default, proxy.server1Info.domain),
            errorPage2: proxy.resolveRelativeServiceUrl(error_route_1.default, proxy.server2Info.domain),
            idlePage: browserConnection.idleUrl,
            openFileProtocolUrl: browserConnection.openFileProtocolUrl,
        };
    }
    async _handleMockErrorIfNecessary(pipelineContext, event) {
        if (!pipelineContext.mock.hasError)
            return;
        await pipelineContext.handleMockError(this.requestHookEventProvider);
        (0, debug_loggers_1.requestPipelineMockLogger)('%s\n%s', event.networkId, pipelineContext.mock.error);
    }
    async _handleMockResponse(mockedResponse, pipelineContext, event, sessionId) {
        if (this._stopped)
            return;
        const mockedResponseBodyStr = mockedResponse.getBody().toString();
        const fulfillInfo = {
            requestId: event.requestId,
            responseCode: mockedResponse.statusCode,
            responseHeaders: (0, headers_1.convertToHeaderEntries)(mockedResponse.headers),
            body: mockedResponseBodyStr,
        };
        if (pipelineContext.reqOpts.isAjax)
            await this._resourceInjector.processNonProxiedContent(fulfillInfo, this._client, sessionId);
        else {
            await this._resourceInjector.processHTMLPageContent(fulfillInfo, {
                isIframe: false,
                contextStorage: this.contextStorage,
            }, this._client, sessionId);
        }
        (0, debug_loggers_1.requestPipelineMockLogger)(`sent mocked response for the ${event.requestId}`);
    }
    _createContinueResponseRequest(event, modified) {
        const continueResponseRequest = {
            requestId: event.requestId,
        };
        if (modified) {
            continueResponseRequest.responseHeaders = event.responseHeaders;
            continueResponseRequest.responseCode = event.responseStatusCode;
        }
        return continueResponseRequest;
    }
    _shouldRedirectToErrorPage(event) {
        return event.resourceType === 'Document'
            && !this._isIframe(event.frameId);
    }
    async _getUserScripts(event) {
        const { pipelineContext, eventFactory } = this._contextInfo.getContextData(event);
        await pipelineContext.prepareInjectableUserScripts(eventFactory, this._testRunBridge.getUserScripts());
        return pipelineContext.injectableUserScripts;
    }
    async _respondToOtherRequest(event, sessionId) {
        if ((0, testcafe_hammerhead_1.isRedirectStatusCode)(event.responseStatusCode)) {
            await (0, safe_api_1.safeContinueResponse)(this._client, { requestId: event.requestId }, sessionId);
            return;
        }
        const resourceInfo = await this._resourceInjector.getDocumentResourceInfo(event, this._client);
        if (resourceInfo.error) {
            if (this._shouldRedirectToErrorPage(event)) {
                await this._resourceInjector.redirectToErrorPage(this._client, resourceInfo.error, event.request.url);
                this._contextInfo.dispose((0, cdp_1.getRequestId)(event));
            }
            return;
        }
        const modified = await this.requestHookEventProvider.onResponse(event, resourceInfo.body, this._contextInfo, this._client);
        if (this._needInjectResources(event)) {
            const fulfillInfo = {
                requestId: event.requestId,
                responseHeaders: event.responseHeaders,
                responseCode: event.responseStatusCode,
                body: resourceInfo.body.toString(),
            };
            // NOTE: Strange behavior of the CDP API:
            // if we pass the empty "responseStatusText" value, we get an error 'Invalid status code or phrase'.
            if (event.responseStatusText !== '')
                fulfillInfo.responsePhrase = event.responseStatusText;
            if ((0, cdp_1.isUnauthorized)(event.responseStatusCode))
                await this._tryAuthorizeWithHttpBasicAuthCredentials(event, fulfillInfo);
            const userScripts = await this._getUserScripts(event);
            await this._resourceInjector.processHTMLPageContent(fulfillInfo, {
                isIframe: this._isIframe(event.frameId),
                url: event.request.url,
                restoringStorages: this.restoringStorages,
                contextStorage: this.contextStorage,
                userScripts,
            }, this._client, sessionId);
            this._contextInfo.dispose((0, cdp_1.getRequestId)(event));
            this.restoringStorages = null;
        }
        else {
            const continueResponseRequest = this._createContinueResponseRequest(event, modified);
            await (0, safe_api_1.safeContinueResponse)(this._client, continueResponseRequest, sessionId);
            this._contextInfo.dispose((0, cdp_1.getRequestId)(event));
        }
    }
    _needInjectResources(event) {
        var _a, _b;
        if (event.resourceType !== 'Document')
            return false;
        const contentType = (_b = (_a = event.responseHeaders) === null || _a === void 0 ? void 0 : _a.find(header => header.name.toLowerCase() === 'content-type')) === null || _b === void 0 ? void 0 : _b.value;
        if (contentType)
            return testcafe_hammerhead_1.contentTypeUtils.isPage(contentType);
        return true;
    }
    async _tryAuthorizeWithHttpBasicAuthCredentials(event, fulfillInfo) {
        const credentials = this._testRun.getAuthCredentials();
        if (!credentials)
            return;
        const authRequest = await (0, resendAuthRequest_1.resendAuthRequest)(event.request, credentials);
        if (typeof authRequest !== 'string' && !(0, cdp_1.isUnauthorized)(authRequest.status)) {
            fulfillInfo.responseCode = authRequest.status;
            fulfillInfo.body = authRequest.body.toString();
            fulfillInfo.responsePhrase = authRequest.statusText;
        }
    }
    _createError(event) {
        if (this._pendingCertificateError)
            return (0, errors_1.sslCertificateError)(this._pendingCertificateError.errorType);
        if (event.responseErrorReason === 'NameNotResolved')
            return (0, errors_1.failedToFindDNSError)(event.request.url);
        return new Error(event.responseErrorReason);
    }
    async _tryRespondToOtherRequest(event, sessionId) {
        try {
            if (event.responseErrorReason && this._shouldRedirectToErrorPage(event)) {
                const error = this._createError(event);
                await this._resourceInjector.redirectToErrorPage(this._client, error, event.request.url);
            }
            else
                await this._respondToOtherRequest(event, sessionId);
        }
        catch (err) {
            if (event.networkId && this._failedRequestIds.includes(event.networkId)) {
                (0, lodash_1.remove)(this._failedRequestIds, event.networkId);
                return;
            }
            throw err;
        }
    }
    async _handleOtherRequests(event, sessionId) {
        (0, debug_loggers_1.requestPipelineOtherRequestLogger)('%r', event);
        if (!event.responseErrorReason && ((0, cdp_1.isRequest)(event) || (0, testcafe_hammerhead_1.isRedirectStatusCode)(event.responseStatusCode))) {
            this._contextInfo.init(event);
            await this.requestHookEventProvider.onRequest(event, this._contextInfo);
            const pipelineContext = this._contextInfo.getPipelineContext((0, cdp_1.getRequestId)(event));
            if (!pipelineContext || !pipelineContext.mock)
                await (0, safe_api_1.safeContinueRequest)(this._client, event, sessionId, this._createContinueEventArgs(event, pipelineContext.reqOpts));
            else {
                (0, debug_loggers_1.requestPipelineMockLogger)('begin mocking request %r', event);
                const mockedResponse = await pipelineContext.getMockResponse();
                await this._handleMockErrorIfNecessary(pipelineContext, event);
                const mockedResponseEvent = (0, cdp_1.createRequestPausedEventForResponse)(mockedResponse, event);
                await this.requestHookEventProvider.onResponse(mockedResponseEvent, mockedResponse.getBody(), this._contextInfo, this._client);
                await this._handleMockResponse(mockedResponse, pipelineContext, event, sessionId);
                this._contextInfo.dispose((0, cdp_1.getRequestId)(event));
                (0, debug_loggers_1.requestPipelineMockLogger)('end mocking request %r', event);
            }
        }
        else
            await this._tryRespondToOtherRequest(event, sessionId);
    }
    _getUploadPostData(event) {
        if (!event.request.postData)
            return void 0;
        const contentTypeHeader = event.request.headers['Content-Type'];
        const postData = Buffer.from(event.request.postData, 'utf-8');
        const bodyWithUploads = (0, testcafe_hammerhead_1.injectUpload)(contentTypeHeader, postData);
        return bodyWithUploads ? bodyWithUploads.toString('base64') : void 0;
    }
    _topFrameNavigation(event) {
        return event.type === 'Navigation'
            && !event.frame.parentId;
    }
    async _updateCurrentFrameTree() {
        // NOTE: Due to CDP restrictions (it hangs), we can't get the frame tree
        // right before injecting service scripts.
        // So, we are forced tracking frames tree.
        const result = await this._client.Page.getFrameTree();
        this._currentFrameTree = result.frameTree;
    }
    _isIframe(frameId) {
        if (!this._currentFrameTree)
            return false;
        return this._currentFrameTree.frame.id !== frameId;
    }
    async start() {
        // NOTE: We are forced to handle all requests and responses at once
        // because CDP API does not allow specifying request filtering behavior for different handlers.
        await this._client.Fetch.enable({
            patterns: ALL_REQUESTS_DATA,
        });
        // NOTE: these issues exist only in headless mode:
        // https://github.com/DevExpress/testcafe/issues/7640#issuecomment-1538220298
        // https://github.com/DevExpress/testcafe-private/issues/190
        if (!this.options.isHeadless) {
            await this._client.Target.setAutoAttach({
                autoAttach: true,
                waitForDebuggerOnStart: true,
                flatten: true,
            });
            // NOTE: We need to enable the Fetch domain for iframe targets
            // to intercept some requests. We need to use the `sessionId` option
            // in continueRequest/continueResponse/fulfillRequest methods
            await this._client.Target.on('attachedToTarget', async (event) => {
                if (event.targetInfo.type !== 'iframe')
                    return;
                // @ts-ignore
                await this._client.Runtime.runIfWaitingForDebugger(event.sessionId);
                // @ts-ignore
                await this._client.Fetch.enable({ patterns: ALL_REQUESTS_DATA }, event.sessionId);
            });
        }
        // @ts-ignore
        this._client.Fetch.on('requestPaused', async (event, sessionId) => {
            if (this._stopped)
                return;
            const specialRequestHandler = (0, special_handlers_1.default)(event, this.options, this._specialServiceRoutes);
            if (specialRequestHandler)
                await specialRequestHandler(event, this._client, this.options, sessionId);
            else
                await this._handleOtherRequests(event, sessionId);
        });
        this._client.Page.on('frameNavigated', async (event) => {
            (0, debug_loggers_1.requestPipelineLogger)('%f', event);
            if (!this._topFrameNavigation(event)
                || event.frame.url !== testcafe_hammerhead_1.SPECIAL_BLANK_PAGE)
                return;
            this._contextInfo.init(event);
            const userScripts = await this._getUserScripts(event);
            await this._resourceInjector.processAboutBlankPage(event, userScripts, this.contextStorage, this._client);
            this._contextInfo.dispose((0, cdp_1.getRequestId)(event));
        });
        this._client.Page.on('frameStartedLoading', async () => {
            await this._updateCurrentFrameTree();
        });
        this._client.Network.on('loadingFailed', async (event) => {
            (0, debug_loggers_1.requestPipelineLogger)('%l', event);
            this._failedRequestIds.push(event.requestId);
            if (event.requestId)
                this._contextInfo.dispose(event.requestId);
        });
        await this._client.Page.setBypassCSP({ enabled: true });
        await this._client.Security.enable();
        this._client.Security.on('certificateError', async (event) => {
            this._pendingCertificateError = event;
        });
    }
    stop() {
        this._stopped = true;
    }
    async dispose() {
        await this._client.Fetch.disable();
    }
    _createContinueEventArgs(event, reqOpts) {
        const modifiedUrl = new URL(event.request.url);
        const host = modifiedUrl.host;
        let hostModified = false;
        let portModified = false;
        if (modifiedUrl.hostname !== reqOpts.hostname) {
            modifiedUrl.hostname = reqOpts.hostname;
            hostModified = true;
        }
        if (modifiedUrl.port !== reqOpts.port) {
            modifiedUrl.port = reqOpts.port;
            portModified = true;
        }
        if (host !== reqOpts.host) {
            const { port, hostname } = new URL(reqOpts.protocol + '//' + reqOpts.host);
            if (!hostModified)
                modifiedUrl.hostname = hostname;
            if (!portModified)
                modifiedUrl.port = port;
        }
        const postData = this._getUploadPostData(event);
        const url = modifiedUrl.toString() !== event.request.url ? modifiedUrl.toString() : void 0;
        const method = reqOpts.method;
        return { postData, url, method };
    }
}
exports.default = NativeAutomationRequestPipeline;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,