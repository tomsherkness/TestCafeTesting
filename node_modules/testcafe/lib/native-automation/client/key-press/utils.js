"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.changeLetterCaseIfNecessary = exports.getSimulatedKeyInfo = void 0;
const get_key_info_1 = __importDefault(require("../../../client/automation/playback/press/get-key-info"));
// @ts-ignore
const hammerhead_1 = require("../../../client/core/deps/hammerhead");
// @ts-ignore
const testcafe_core_1 = require("../../../client/automation/deps/testcafe-core");
const utils_1 = require("../../../client/automation/playback/press/utils");
const utils_2 = require("../utils");
const get_key_code_1 = __importDefault(require("../../../client/automation/utils/get-key-code"));
function getSimulatedKeyInfo(keyCombination) {
    const keysArray = (0, testcafe_core_1.getKeyArray)(keyCombination);
    const { actualKeys, eventKeyProperties } = (0, utils_1.getActualKeysAndEventKeyProperties)(keysArray);
    return testcafe_core_1.arrayUtils.map(actualKeys, (key, index) => {
        return hammerhead_1.utils.extend({ key }, (0, get_key_info_1.default)(key, eventKeyProperties[index]));
    });
}
exports.getSimulatedKeyInfo = getSimulatedKeyInfo;
function changeLetterCaseIfNecessary(keyInfo) {
    const modifiersState = (0, utils_2.getModifiersState)(keyInfo.modifiers);
    if (modifiersState.shift && keyInfo.isLetter) {
        keyInfo.keyProperty = (0, utils_1.changeLetterCase)(keyInfo.keyProperty);
        keyInfo.keyCode = (0, get_key_code_1.default)(keyInfo.keyProperty);
    }
}
exports.changeLetterCaseIfNecessary = changeLetterCaseIfNecessary;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbmF0aXZlLWF1dG9tYXRpb24vY2xpZW50L2tleS1wcmVzcy91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSwwR0FBZ0Y7QUFDaEYsYUFBYTtBQUNiLHFFQUE2RDtBQUM3RCxhQUFhO0FBQ2IsaUZBQXdGO0FBQ3hGLDJFQUF1SDtBQUN2SCxvQ0FBNkM7QUFDN0MsaUdBQXVFO0FBYXZFLFNBQWdCLG1CQUFtQixDQUFFLGNBQXNCO0lBQ3ZELE1BQU0sU0FBUyxHQUE0QixJQUFBLDJCQUFXLEVBQUMsY0FBYyxDQUFDLENBQUM7SUFDdkUsTUFBTSxFQUFFLFVBQVUsRUFBRSxrQkFBa0IsRUFBRSxHQUFHLElBQUEsMENBQWtDLEVBQUMsU0FBUyxDQUFDLENBQUM7SUFFekYsT0FBTywwQkFBVSxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUU7UUFDN0QsT0FBTyxrQkFBSyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUEsc0JBQVUsRUFBQyxHQUFHLEVBQUUsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdFLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVBELGtEQU9DO0FBRUQsU0FBZ0IsMkJBQTJCLENBQUUsT0FBeUI7SUFDbEUsTUFBTSxjQUFjLEdBQUcsSUFBQSx5QkFBaUIsRUFBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFNUQsSUFBSSxjQUFjLENBQUMsS0FBSyxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7UUFDMUMsT0FBTyxDQUFDLFdBQVcsR0FBRyxJQUFBLHdCQUFnQixFQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM1RCxPQUFPLENBQUMsT0FBTyxHQUFPLElBQUEsc0JBQVUsRUFBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7S0FDekQ7QUFDTCxDQUFDO0FBUEQsa0VBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0S2V5SW5mbyBmcm9tICcuLi8uLi8uLi9jbGllbnQvYXV0b21hdGlvbi9wbGF5YmFjay9wcmVzcy9nZXQta2V5LWluZm8nO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgdXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jbGllbnQvY29yZS9kZXBzL2hhbW1lcmhlYWQnO1xuLy8gQHRzLWlnbm9yZVxuaW1wb3J0IHsgZ2V0S2V5QXJyYXksIGFycmF5VXRpbHMgfSBmcm9tICcuLi8uLi8uLi9jbGllbnQvYXV0b21hdGlvbi9kZXBzL3Rlc3RjYWZlLWNvcmUnO1xuaW1wb3J0IHsgY2hhbmdlTGV0dGVyQ2FzZSwgZ2V0QWN0dWFsS2V5c0FuZEV2ZW50S2V5UHJvcGVydGllcyB9IGZyb20gJy4uLy4uLy4uL2NsaWVudC9hdXRvbWF0aW9uL3BsYXliYWNrL3ByZXNzL3V0aWxzJztcbmltcG9ydCB7IGdldE1vZGlmaWVyc1N0YXRlIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IGdldEtleUNvZGUgZnJvbSAnLi4vLi4vLi4vY2xpZW50L2F1dG9tYXRpb24vdXRpbHMvZ2V0LWtleS1jb2RlJztcblxuZXhwb3J0IGludGVyZmFjZSBTaW11bGF0ZWRLZXlJbmZvIHtcbiAgICBrZXk6IHN0cmluZztcbiAgICBrZXlDb2RlOiBudW1iZXI7XG4gICAga2V5UHJvcGVydHk6IHN0cmluZztcbiAgICBtb2RpZmllcnM6IG51bWJlcjtcbiAgICBtb2RpZmllcktleUNvZGU6IG51bWJlcjtcbiAgICBpc0xldHRlcjogYm9vbGVhbjtcbiAgICBpc0NoYXI6IGJvb2xlYW47XG4gICAgaXNOZXdMaW5lOiBib29sZWFuO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2ltdWxhdGVkS2V5SW5mbyAoa2V5Q29tYmluYXRpb246IHN0cmluZyk6IFNpbXVsYXRlZEtleUluZm9bXSB7XG4gICAgY29uc3Qga2V5c0FycmF5ICAgICAgICAgICAgICAgICAgICAgICAgICA9IGdldEtleUFycmF5KGtleUNvbWJpbmF0aW9uKTtcbiAgICBjb25zdCB7IGFjdHVhbEtleXMsIGV2ZW50S2V5UHJvcGVydGllcyB9ID0gZ2V0QWN0dWFsS2V5c0FuZEV2ZW50S2V5UHJvcGVydGllcyhrZXlzQXJyYXkpO1xuXG4gICAgcmV0dXJuIGFycmF5VXRpbHMubWFwKGFjdHVhbEtleXMsIChrZXk6IHN0cmluZywgaW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4gdXRpbHMuZXh0ZW5kKHsga2V5IH0sIGdldEtleUluZm8oa2V5LCBldmVudEtleVByb3BlcnRpZXNbaW5kZXhdKSk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VMZXR0ZXJDYXNlSWZOZWNlc3NhcnkgKGtleUluZm86IFNpbXVsYXRlZEtleUluZm8pOiB2b2lkIHtcbiAgICBjb25zdCBtb2RpZmllcnNTdGF0ZSA9IGdldE1vZGlmaWVyc1N0YXRlKGtleUluZm8ubW9kaWZpZXJzKTtcblxuICAgIGlmIChtb2RpZmllcnNTdGF0ZS5zaGlmdCAmJiBrZXlJbmZvLmlzTGV0dGVyKSB7XG4gICAgICAgIGtleUluZm8ua2V5UHJvcGVydHkgPSBjaGFuZ2VMZXR0ZXJDYXNlKGtleUluZm8ua2V5UHJvcGVydHkpO1xuICAgICAgICBrZXlJbmZvLmtleUNvZGUgICAgID0gZ2V0S2V5Q29kZShrZXlJbmZvLmtleVByb3BlcnR5KTtcbiAgICB9XG59XG4iXX0=