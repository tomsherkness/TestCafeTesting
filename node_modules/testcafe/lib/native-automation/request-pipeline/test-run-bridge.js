"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const connection_1 = __importDefault(require("../../browser/connection"));
class TestRunBridge {
    constructor(browserId) {
        this._browserId = browserId;
    }
    getBrowserConnection() {
        return connection_1.default.getById(this._browserId);
    }
    getCurrentTestRun() {
        const browserConnection = this.getBrowserConnection();
        return browserConnection.getCurrentTestRun();
    }
    getSessionId() {
        var _a;
        return ((_a = this.getCurrentTestRun()) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    getUserScripts() {
        const currentTestRun = this.getCurrentTestRun();
        if (!currentTestRun)
            return [];
        return currentTestRun.injectable.userScripts;
    }
    async getTaskScript({ isIframe }) {
        const browserConnection = this.getBrowserConnection();
        const proxy = browserConnection.browserConnectionGateway.proxy;
        const windowId = browserConnection.activeWindowId;
        // @ts-ignore
        return await this.getCurrentTestRun().session.getTaskScript({
            referer: '',
            cookieUrl: '',
            withPayload: true,
            serverInfo: proxy.server1Info,
            windowId,
            isIframe,
        });
    }
}
exports.default = TestRunBridge;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC1ydW4tYnJpZGdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25hdGl2ZS1hdXRvbWF0aW9uL3JlcXVlc3QtcGlwZWxpbmUvdGVzdC1ydW4tYnJpZGdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsMEVBQXlEO0FBSXpELE1BQXFCLGFBQWE7SUFFOUIsWUFBb0IsU0FBaUI7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDaEMsQ0FBQztJQUVNLG9CQUFvQjtRQUN2QixPQUFPLG9CQUFpQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFzQixDQUFDO0lBQzNFLENBQUM7SUFFTSxpQkFBaUI7UUFDcEIsTUFBTSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztRQUV0RCxPQUFPLGlCQUFpQixDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLFlBQVk7O1FBQ2YsT0FBTyxDQUFBLE1BQUEsSUFBSSxDQUFDLGlCQUFpQixFQUFFLDBDQUFFLEVBQUUsS0FBSSxFQUFFLENBQUM7SUFDOUMsQ0FBQztJQUVNLGNBQWM7UUFDakIsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7UUFFaEQsSUFBSSxDQUFDLGNBQWM7WUFDZixPQUFPLEVBQUUsQ0FBQztRQUVkLE9BQU8sY0FBYyxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyxhQUFhLENBQUUsRUFBRSxRQUFRLEVBQThCO1FBQ2hFLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7UUFDdEQsTUFBTSxLQUFLLEdBQWUsaUJBQWlCLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDO1FBQzNFLE1BQU0sUUFBUSxHQUFZLGlCQUFpQixDQUFDLGNBQWMsQ0FBQztRQUUzRCxhQUFhO1FBQ2IsT0FBTyxNQUFNLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7WUFDeEQsT0FBTyxFQUFNLEVBQUU7WUFDZixTQUFTLEVBQUksRUFBRTtZQUNmLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLFVBQVUsRUFBRyxLQUFLLENBQUMsV0FBVztZQUM5QixRQUFRO1lBQ1IsUUFBUTtTQUNYLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQTVDRCxnQ0E0Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVGVzdFJ1biBmcm9tICcuLi8uLi90ZXN0LXJ1bic7XG5pbXBvcnQgQnJvd3NlckNvbm5lY3Rpb24gZnJvbSAnLi4vLi4vYnJvd3Nlci9jb25uZWN0aW9uJztcbmltcG9ydCB7IFVzZXJTY3JpcHQgfSBmcm9tICd0ZXN0Y2FmZS1oYW1tZXJoZWFkJztcbmltcG9ydCB7IEluamVjdGFibGVSZXNvdXJjZXNPcHRpb25zIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUZXN0UnVuQnJpZGdlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IF9icm93c2VySWQ6IHN0cmluZztcbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGJyb3dzZXJJZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuX2Jyb3dzZXJJZCA9IGJyb3dzZXJJZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QnJvd3NlckNvbm5lY3Rpb24gKCk6IEJyb3dzZXJDb25uZWN0aW9uIHtcbiAgICAgICAgcmV0dXJuIEJyb3dzZXJDb25uZWN0aW9uLmdldEJ5SWQodGhpcy5fYnJvd3NlcklkKSBhcyBCcm93c2VyQ29ubmVjdGlvbjtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0Q3VycmVudFRlc3RSdW4gKCk6IFRlc3RSdW4ge1xuICAgICAgICBjb25zdCBicm93c2VyQ29ubmVjdGlvbiA9IHRoaXMuZ2V0QnJvd3NlckNvbm5lY3Rpb24oKTtcblxuICAgICAgICByZXR1cm4gYnJvd3NlckNvbm5lY3Rpb24uZ2V0Q3VycmVudFRlc3RSdW4oKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U2Vzc2lvbklkICgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpPy5pZCB8fCAnJztcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0VXNlclNjcmlwdHMgKCk6IFVzZXJTY3JpcHRbXSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUZXN0UnVuID0gdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpO1xuXG4gICAgICAgIGlmICghY3VycmVudFRlc3RSdW4pXG4gICAgICAgICAgICByZXR1cm4gW107XG5cbiAgICAgICAgcmV0dXJuIGN1cnJlbnRUZXN0UnVuLmluamVjdGFibGUudXNlclNjcmlwdHM7XG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGdldFRhc2tTY3JpcHQgKHsgaXNJZnJhbWUgfTogSW5qZWN0YWJsZVJlc291cmNlc09wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgICAgICBjb25zdCBicm93c2VyQ29ubmVjdGlvbiA9IHRoaXMuZ2V0QnJvd3NlckNvbm5lY3Rpb24oKTtcbiAgICAgICAgY29uc3QgcHJveHkgICAgICAgICAgICAgPSBicm93c2VyQ29ubmVjdGlvbi5icm93c2VyQ29ubmVjdGlvbkdhdGV3YXkucHJveHk7XG4gICAgICAgIGNvbnN0IHdpbmRvd0lkICAgICAgICAgID0gYnJvd3NlckNvbm5lY3Rpb24uYWN0aXZlV2luZG93SWQ7XG5cbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRDdXJyZW50VGVzdFJ1bigpLnNlc3Npb24uZ2V0VGFza1NjcmlwdCh7XG4gICAgICAgICAgICByZWZlcmVyOiAgICAgJycsXG4gICAgICAgICAgICBjb29raWVVcmw6ICAgJycsXG4gICAgICAgICAgICB3aXRoUGF5bG9hZDogdHJ1ZSxcbiAgICAgICAgICAgIHNlcnZlckluZm86ICBwcm94eS5zZXJ2ZXIxSW5mbyxcbiAgICAgICAgICAgIHdpbmRvd0lkLFxuICAgICAgICAgICAgaXNJZnJhbWUsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==