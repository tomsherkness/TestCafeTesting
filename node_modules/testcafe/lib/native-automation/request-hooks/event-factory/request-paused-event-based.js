"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testcafe_hammerhead_1 = require("testcafe-hammerhead");
const lodash_1 = require("lodash");
const http_status_codes_1 = require("http-status-codes");
const headers_1 = require("../../utils/headers");
class RequestPausedEventBasedEventFactory extends testcafe_hammerhead_1.BaseRequestHookEventFactory {
    constructor(event, sessionId) {
        super();
        this._event = event;
        this._responseBody = Buffer.alloc(0);
        this._sessionId = sessionId;
        this._modifyResponseFunction = this._createModifyResponseFunctions();
        this.headersModified = false;
    }
    _createModifyResponseFunctions() {
        return {
            setHeader: (name, value) => {
                const header = this._event.responseHeaders.find(h => h.name.toLowerCase() === name.toLowerCase());
                if (!header)
                    this._event.responseHeaders.push({ name, value });
                else
                    header.value = value;
                this.headersModified = true;
            },
            removeHeader: (name) => {
                (0, lodash_1.remove)(this._event.responseHeaders, header => header.name.toLowerCase() === name.toLowerCase());
                this.headersModified = true;
            },
        };
    }
    static _getRequestData(request) {
        if (request.postData)
            return Buffer.from(request.postData);
        return Buffer.alloc(0);
    }
    static _getIsAjaxRequest(event) {
        return event.resourceType === 'XHR'
            || event.resourceType === 'Fetch';
    }
    update(event) {
        this._event = event;
    }
    setResponseBody(body) {
        this._responseBody = body;
    }
    createRequestInfo() {
        const { requestId, request } = this._event;
        return new testcafe_hammerhead_1.RequestInfo({
            requestId,
            sessionId: this._sessionId,
            userAgent: testcafe_hammerhead_1.RequestInfo.getUserAgent(request.headers),
            url: request.url,
            method: request.method.toLowerCase(),
            headers: (0, headers_1.lowerCaseHeaderNames)(request.headers),
            body: RequestPausedEventBasedEventFactory._getRequestData(request),
            isAjax: RequestPausedEventBasedEventFactory._getIsAjaxRequest(this._event),
        });
    }
    createRequestOptions() {
        const parsedUrl = new URL(this._event.request.url);
        const requestParams = {
            method: this._event.request.method,
            url: this._event.request.url,
            protocol: parsedUrl.protocol,
            hostname: parsedUrl.hostname,
            host: parsedUrl.host,
            port: parsedUrl.port,
            path: parsedUrl.pathname,
            headers: this._event.request.headers,
            body: RequestPausedEventBasedEventFactory._getRequestData(this._event.request),
            isAjax: RequestPausedEventBasedEventFactory._getIsAjaxRequest(this._event),
        };
        if (parsedUrl.username)
            requestParams.auth = parsedUrl.username + ':' + parsedUrl.password;
        return new testcafe_hammerhead_1.RequestOptions(requestParams);
    }
    createConfigureResponseEvent(rule) {
        return new testcafe_hammerhead_1.ConfigureResponseEvent(rule, this._modifyResponseFunction);
    }
    createResponseInfo() {
        return new testcafe_hammerhead_1.ResponseInfo({
            statusCode: this._event.responseStatusCode || http_status_codes_1.StatusCodes.OK,
            headers: (0, headers_1.convertToOutgoingHttpHeaders)(this._event.responseHeaders),
            body: this._responseBody,
            sessionId: '',
            requestId: this._event.requestId,
            isSameOriginPolicyFailed: false,
        });
    }
}
exports.default = RequestPausedEventBasedEventFactory;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,