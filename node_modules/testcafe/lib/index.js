"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const embedding_utils_1 = __importDefault(require("./embedding-utils"));
const exportable_lib_1 = __importDefault(require("./api/exportable-lib"));
const testcafe_configuration_1 = __importDefault(require("./configuration/testcafe-configuration"));
const option_names_1 = __importDefault(require("./configuration/option-names"));
const user_variables_1 = __importDefault(require("./api/user-variables"));
const utils_1 = require("./configuration/utils");
const lazyRequire = require('import-lazy')(require);
const TestCafe = lazyRequire('./testcafe');
const setupExitHook = lazyRequire('async-exit-hook');
// API
async function getConfiguration(args) {
    var _a;
    let configuration;
    if (args.length === 1 && typeof args[0] === 'object') {
        configuration = new testcafe_configuration_1.default((_a = args[0]) === null || _a === void 0 ? void 0 : _a.configFile);
        await configuration.init(args[0]);
    }
    else {
        // NOTE: Positional arguments support is left only for backward compatibility.
        // It should be removed in future TestCafe versions.
        // All new APIs should be enabled through the configuration object in the upper clause.
        // Please do not add new APIs here.
        const [hostname, port1, port2, ssl, developmentMode, retryTestPages, cache, configFile] = args;
        configuration = new testcafe_configuration_1.default(configFile);
        await configuration.init({
            hostname,
            port1,
            port2,
            ssl,
            developmentMode,
            retryTestPages,
            cache,
        });
    }
    return configuration;
}
// API
async function createTestCafe(...args) {
    const configuration = await getConfiguration(args);
    const [hostname, port1, port2] = await Promise.all([
        (0, utils_1.getValidHostname)(configuration.getOption(option_names_1.default.hostname)),
        (0, utils_1.getValidPort)(configuration.getOption(option_names_1.default.port1)),
        (0, utils_1.getValidPort)(configuration.getOption(option_names_1.default.port2)),
    ]);
    const userVariablesOption = configuration.getOption(option_names_1.default.userVariables);
    if (userVariablesOption)
        user_variables_1.default.value = userVariablesOption;
    configuration.mergeOptions({ hostname, port1, port2 });
    const testcafe = new TestCafe(configuration);
    setupExitHook(cb => testcafe.close().then(cb));
    return testcafe;
}
// Embedding utils
createTestCafe.embeddingUtils = embedding_utils_1.default;
// Common API
Object.keys(exportable_lib_1.default).forEach(key => {
    Object.defineProperty(createTestCafe, key, { get: () => exportable_lib_1.default[key] });
});
exports.default = createTestCafe;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSx3RUFBK0M7QUFDL0MsMEVBQWlEO0FBQ2pELG9HQUEyRTtBQUMzRSxnRkFBd0Q7QUFDeEQsMEVBQWlEO0FBQ2pELGlEQUF1RTtBQUV2RSxNQUFNLFdBQVcsR0FBSyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEQsTUFBTSxRQUFRLEdBQVEsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ2hELE1BQU0sYUFBYSxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRXJELE1BQU07QUFDTixLQUFLLFVBQVUsZ0JBQWdCLENBQUUsSUFBSTs7SUFDakMsSUFBSSxhQUFhLENBQUM7SUFFbEIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDbEQsYUFBYSxHQUFHLElBQUksZ0NBQXFCLENBQUMsTUFBQSxJQUFJLENBQUMsQ0FBQyxDQUFDLDBDQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRS9ELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNyQztTQUNJO1FBQ0QsOEVBQThFO1FBQzlFLG9EQUFvRDtRQUNwRCx1RkFBdUY7UUFDdkYsbUNBQW1DO1FBQ25DLE1BQU0sQ0FBQyxRQUFRLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsZUFBZSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRS9GLGFBQWEsR0FBRyxJQUFJLGdDQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRELE1BQU0sYUFBYSxDQUFDLElBQUksQ0FBQztZQUNyQixRQUFRO1lBQ1IsS0FBSztZQUNMLEtBQUs7WUFDTCxHQUFHO1lBQ0gsZUFBZTtZQUNmLGNBQWM7WUFDZCxLQUFLO1NBQ1IsQ0FBQyxDQUFDO0tBQ047SUFFRCxPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTTtBQUNOLEtBQUssVUFBVSxjQUFjLENBQUUsR0FBRyxJQUFJO0lBQ2xDLE1BQU0sYUFBYSxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFFbkQsTUFBTSxDQUFDLFFBQVEsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUFDO1FBQy9DLElBQUEsd0JBQWdCLEVBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxzQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hFLElBQUEsb0JBQVksRUFBQyxhQUFhLENBQUMsU0FBUyxDQUFDLHNCQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekQsSUFBQSxvQkFBWSxFQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsc0JBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUM1RCxDQUFDLENBQUM7SUFFSCxNQUFNLG1CQUFtQixHQUFHLGFBQWEsQ0FBQyxTQUFTLENBQUMsc0JBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUVoRixJQUFJLG1CQUFtQjtRQUNuQix3QkFBYSxDQUFDLEtBQUssR0FBRyxtQkFBbUIsQ0FBQztJQUU5QyxhQUFhLENBQUMsWUFBWSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBRXZELE1BQU0sUUFBUSxHQUFHLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBRTdDLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUUvQyxPQUFPLFFBQVEsQ0FBQztBQUNwQixDQUFDO0FBRUQsa0JBQWtCO0FBQ2xCLGNBQWMsQ0FBQyxjQUFjLEdBQUcseUJBQWMsQ0FBQztBQUUvQyxhQUFhO0FBQ2IsTUFBTSxDQUFDLElBQUksQ0FBQyx3QkFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0lBQ3JDLE1BQU0sQ0FBQyxjQUFjLENBQUMsY0FBYyxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyx3QkFBYSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNsRixDQUFDLENBQUMsQ0FBQztBQUVILGtCQUFlLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBlbWJlZGRpbmdVdGlscyBmcm9tICcuL2VtYmVkZGluZy11dGlscyc7XG5pbXBvcnQgZXhwb3J0YWJsZUxpYiBmcm9tICcuL2FwaS9leHBvcnRhYmxlLWxpYic7XG5pbXBvcnQgVGVzdENhZmVDb25maWd1cmF0aW9uIGZyb20gJy4vY29uZmlndXJhdGlvbi90ZXN0Y2FmZS1jb25maWd1cmF0aW9uJztcbmltcG9ydCBPUFRJT05fTkFNRVMgZnJvbSAnLi9jb25maWd1cmF0aW9uL29wdGlvbi1uYW1lcyc7XG5pbXBvcnQgdXNlclZhcmlhYmxlcyBmcm9tICcuL2FwaS91c2VyLXZhcmlhYmxlcyc7XG5pbXBvcnQgeyBnZXRWYWxpZEhvc3RuYW1lLCBnZXRWYWxpZFBvcnQgfSBmcm9tICcuL2NvbmZpZ3VyYXRpb24vdXRpbHMnO1xuXG5jb25zdCBsYXp5UmVxdWlyZSAgID0gcmVxdWlyZSgnaW1wb3J0LWxhenknKShyZXF1aXJlKTtcbmNvbnN0IFRlc3RDYWZlICAgICAgPSBsYXp5UmVxdWlyZSgnLi90ZXN0Y2FmZScpO1xuY29uc3Qgc2V0dXBFeGl0SG9vayA9IGxhenlSZXF1aXJlKCdhc3luYy1leGl0LWhvb2snKTtcblxuLy8gQVBJXG5hc3luYyBmdW5jdGlvbiBnZXRDb25maWd1cmF0aW9uIChhcmdzKSB7XG4gICAgbGV0IGNvbmZpZ3VyYXRpb247XG5cbiAgICBpZiAoYXJncy5sZW5ndGggPT09IDEgJiYgdHlwZW9mIGFyZ3NbMF0gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSBuZXcgVGVzdENhZmVDb25maWd1cmF0aW9uKGFyZ3NbMF0/LmNvbmZpZ0ZpbGUpO1xuXG4gICAgICAgIGF3YWl0IGNvbmZpZ3VyYXRpb24uaW5pdChhcmdzWzBdKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIC8vIE5PVEU6IFBvc2l0aW9uYWwgYXJndW1lbnRzIHN1cHBvcnQgaXMgbGVmdCBvbmx5IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgICAgICAvLyBJdCBzaG91bGQgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgVGVzdENhZmUgdmVyc2lvbnMuXG4gICAgICAgIC8vIEFsbCBuZXcgQVBJcyBzaG91bGQgYmUgZW5hYmxlZCB0aHJvdWdoIHRoZSBjb25maWd1cmF0aW9uIG9iamVjdCBpbiB0aGUgdXBwZXIgY2xhdXNlLlxuICAgICAgICAvLyBQbGVhc2UgZG8gbm90IGFkZCBuZXcgQVBJcyBoZXJlLlxuICAgICAgICBjb25zdCBbaG9zdG5hbWUsIHBvcnQxLCBwb3J0Miwgc3NsLCBkZXZlbG9wbWVudE1vZGUsIHJldHJ5VGVzdFBhZ2VzLCBjYWNoZSwgY29uZmlnRmlsZV0gPSBhcmdzO1xuXG4gICAgICAgIGNvbmZpZ3VyYXRpb24gPSBuZXcgVGVzdENhZmVDb25maWd1cmF0aW9uKGNvbmZpZ0ZpbGUpO1xuXG4gICAgICAgIGF3YWl0IGNvbmZpZ3VyYXRpb24uaW5pdCh7XG4gICAgICAgICAgICBob3N0bmFtZSxcbiAgICAgICAgICAgIHBvcnQxLFxuICAgICAgICAgICAgcG9ydDIsXG4gICAgICAgICAgICBzc2wsXG4gICAgICAgICAgICBkZXZlbG9wbWVudE1vZGUsXG4gICAgICAgICAgICByZXRyeVRlc3RQYWdlcyxcbiAgICAgICAgICAgIGNhY2hlLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gY29uZmlndXJhdGlvbjtcbn1cblxuLy8gQVBJXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVUZXN0Q2FmZSAoLi4uYXJncykge1xuICAgIGNvbnN0IGNvbmZpZ3VyYXRpb24gPSBhd2FpdCBnZXRDb25maWd1cmF0aW9uKGFyZ3MpO1xuXG4gICAgY29uc3QgW2hvc3RuYW1lLCBwb3J0MSwgcG9ydDJdID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgICBnZXRWYWxpZEhvc3RuYW1lKGNvbmZpZ3VyYXRpb24uZ2V0T3B0aW9uKE9QVElPTl9OQU1FUy5ob3N0bmFtZSkpLFxuICAgICAgICBnZXRWYWxpZFBvcnQoY29uZmlndXJhdGlvbi5nZXRPcHRpb24oT1BUSU9OX05BTUVTLnBvcnQxKSksXG4gICAgICAgIGdldFZhbGlkUG9ydChjb25maWd1cmF0aW9uLmdldE9wdGlvbihPUFRJT05fTkFNRVMucG9ydDIpKSxcbiAgICBdKTtcblxuICAgIGNvbnN0IHVzZXJWYXJpYWJsZXNPcHRpb24gPSBjb25maWd1cmF0aW9uLmdldE9wdGlvbihPUFRJT05fTkFNRVMudXNlclZhcmlhYmxlcyk7XG5cbiAgICBpZiAodXNlclZhcmlhYmxlc09wdGlvbilcbiAgICAgICAgdXNlclZhcmlhYmxlcy52YWx1ZSA9IHVzZXJWYXJpYWJsZXNPcHRpb247XG5cbiAgICBjb25maWd1cmF0aW9uLm1lcmdlT3B0aW9ucyh7IGhvc3RuYW1lLCBwb3J0MSwgcG9ydDIgfSk7XG5cbiAgICBjb25zdCB0ZXN0Y2FmZSA9IG5ldyBUZXN0Q2FmZShjb25maWd1cmF0aW9uKTtcblxuICAgIHNldHVwRXhpdEhvb2soY2IgPT4gdGVzdGNhZmUuY2xvc2UoKS50aGVuKGNiKSk7XG5cbiAgICByZXR1cm4gdGVzdGNhZmU7XG59XG5cbi8vIEVtYmVkZGluZyB1dGlsc1xuY3JlYXRlVGVzdENhZmUuZW1iZWRkaW5nVXRpbHMgPSBlbWJlZGRpbmdVdGlscztcblxuLy8gQ29tbW9uIEFQSVxuT2JqZWN0LmtleXMoZXhwb3J0YWJsZUxpYikuZm9yRWFjaChrZXkgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVUZXN0Q2FmZSwga2V5LCB7IGdldDogKCkgPT4gZXhwb3J0YWJsZUxpYltrZXldIH0pO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRlc3RDYWZlO1xuIl19